import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as dynamodb from 'aws-cdk-lib/aws-dynamodb';
import * as iam from 'aws-cdk-lib/aws-iam';

export class ServerlessConstruct extends Construct {
  constructor(scope: Construct, id: string) {
    super(scope, id);

    // Create a DynamoDB table
    const table = new dynamodb.Table(this, 'MyTable', {
      partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },
      billingMode: dynamodb.BillingMode.PAY_PER_REQUEST
    });

    // Create Lambda function
    const myLambda = new lambda.Function(this, 'MyLambda', {
      runtime: lambda.Runtime.NODEJS_14_X,
      code: lambda.Code.fromAsset('lambda'), // Directory with your Lambda code
      handler: 'index.handler',
      environment: {
        TABLE_NAME: table.tableName,
      }
    });

    // Grant the Lambda function access to the DynamoDB table
    table.grantReadWriteData(myLambda);

    // Create API Gateway and integrate with Lambda
    const api = new apigateway.LambdaRestApi(this, 'MyApi', {
      handler: myLambda,
      proxy: false
    });

    const items = api.root.addResource('items');
    items.addMethod('POST');  // POST /items
    items.addMethod('GET');   // GET /items

    // Optional: Add IAM role
    const lambdaRole = new iam.Role(this, 'LambdaExecutionRole', {
      assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
      managedPolicies: [
        iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole')
      ]
    });

    myLambda.addToRolePolicy(new iam.PolicyStatement({
      actions: ['dynamodb:PutItem', 'dynamodb:GetItem'],
      resources: [table.tableArn],
    }));
  }
}
